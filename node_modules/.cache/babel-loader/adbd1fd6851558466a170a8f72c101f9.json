{"ast":null,"code":"import { GetNumberOption } from '../GetNumberOption';\nimport { DefaultNumberOption } from '../DefaultNumberOption';\nimport { GetOption } from '../GetOption';\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\nexport function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n  var mnid = GetNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n  var mnfd = opts.minimumFractionDigits;\n  var mxfd = opts.maximumFractionDigits;\n  var mnsd = opts.minimumSignificantDigits;\n  var mxsd = opts.maximumSignificantDigits;\n  internalSlots.minimumIntegerDigits = mnid;\n  var roundingPriority = GetOption(opts, 'roundingPriority', 'string', ['auto', 'morePrecision', 'lessPrecision'], 'auto');\n  var hasSd = mnsd !== undefined || mxsd !== undefined;\n  var hasFd = mnfd !== undefined || mxfd !== undefined;\n  var needSd = true;\n  var needFd = true;\n  if (roundingPriority === 'auto') {\n    needSd = hasSd;\n    if (hasSd || !hasFd && notation === 'compact') {\n      needFd = false;\n    }\n  }\n  if (needSd) {\n    if (hasSd) {\n      mnsd = DefaultNumberOption(mnsd, 1, 21, 1);\n      mxsd = DefaultNumberOption(mxsd, mnsd, 21, 21);\n      internalSlots.minimumSignificantDigits = mnsd;\n      internalSlots.maximumSignificantDigits = mxsd;\n    } else {\n      internalSlots.minimumSignificantDigits = 1;\n      internalSlots.maximumSignificantDigits = 21;\n    }\n  }\n  if (needFd) {\n    if (hasFd) {\n      // @ts-expect-error\n      mnfd = DefaultNumberOption(mnfd, 0, 20, undefined);\n      // @ts-expect-error\n      mxfd = DefaultNumberOption(mxfd, 0, 20, undefined);\n      if (mnfd === undefined) {\n        mnfd = Math.min(mnfdDefault, mxfd);\n      } else if (mxfd === undefined) {\n        mxfd = Math.max(mxfdDefault, mnfd);\n      } else if (mnfd > mxfd) {\n        throw new RangeError(\"Invalid range, \".concat(mnfd, \" > \").concat(mxfd));\n      }\n      internalSlots.minimumFractionDigits = mnfd;\n      internalSlots.maximumFractionDigits = mxfd;\n    } else {\n      internalSlots.minimumFractionDigits = mnfdDefault;\n      internalSlots.maximumFractionDigits = mxfdDefault;\n    }\n  }\n  if (needSd || needFd) {\n    if (roundingPriority === 'morePrecision') {\n      internalSlots.roundingType = 'morePrecision';\n    } else if (roundingPriority === 'lessPrecision') {\n      internalSlots.roundingType = 'lessPrecision';\n    } else if (hasSd) {\n      internalSlots.roundingType = 'significantDigits';\n    } else {\n      internalSlots.roundingType = 'fractionDigits';\n    }\n  } else {\n    internalSlots.roundingType = 'morePrecision';\n    internalSlots.minimumFractionDigits = 0;\n    internalSlots.maximumFractionDigits = 0;\n    internalSlots.minimumSignificantDigits = 1;\n    internalSlots.maximumSignificantDigits = 2;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}