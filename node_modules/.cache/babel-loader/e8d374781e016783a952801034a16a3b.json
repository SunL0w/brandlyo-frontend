{"ast":null,"code":"import { CanonicalizeLocaleList } from '../CanonicalizeLocaleList';\nimport { GetOption } from '../GetOption';\nimport { ResolveLocale } from '@formatjs/intl-localematcher';\nimport { SetNumberFormatUnitOptions } from './SetNumberFormatUnitOptions';\nimport { CurrencyDigits } from './CurrencyDigits';\nimport { SetNumberFormatDigitOptions } from './SetNumberFormatDigitOptions';\nimport { invariant } from '../utils';\nimport { CoerceOptionsToObject } from '../CoerceOptionsToObject';\nimport { GetNumberOption } from '../GetNumberOption';\nimport { GetStringOrBooleanOption } from '../GetStringOrBooleanOption';\nvar VALID_ROUND_INCREMENT_VALUES = [1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000];\n/**\n * https://tc39.es/ecma402/#sec-initializenumberformat\n */\nexport function InitializeNumberFormat(nf, locales, opts, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n    localeData = _a.localeData,\n    availableLocales = _a.availableLocales,\n    numberingSystemNames = _a.numberingSystemNames,\n    getDefaultLocale = _a.getDefaultLocale,\n    currencyDigitsData = _a.currencyDigitsData;\n  // @ts-ignore\n  var requestedLocales = CanonicalizeLocaleList(locales);\n  var options = CoerceOptionsToObject(opts);\n  var opt = Object.create(null);\n  var matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n  opt.localeMatcher = matcher;\n  var numberingSystem = GetOption(options, 'numberingSystem', 'string', undefined, undefined);\n  if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {\n    // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,\n    // throw a RangeError exception.\n    throw RangeError(\"Invalid numberingSystems: \".concat(numberingSystem));\n  }\n  opt.nu = numberingSystem;\n  var r = ResolveLocale(availableLocales, requestedLocales, opt,\n  // [[RelevantExtensionKeys]] slot, which is a constant\n  ['nu'], localeData, getDefaultLocale);\n  var dataLocaleData = localeData[r.dataLocale];\n  invariant(!!dataLocaleData, \"Missing locale data for \".concat(r.dataLocale));\n  var internalSlots = getInternalSlots(nf);\n  internalSlots.locale = r.locale;\n  internalSlots.dataLocale = r.dataLocale;\n  internalSlots.numberingSystem = r.nu;\n  internalSlots.dataLocaleData = dataLocaleData;\n  SetNumberFormatUnitOptions(nf, options, {\n    getInternalSlots: getInternalSlots\n  });\n  var style = internalSlots.style;\n  var mnfdDefault;\n  var mxfdDefault;\n  if (style === 'currency') {\n    var currency = internalSlots.currency;\n    var cDigits = CurrencyDigits(currency, {\n      currencyDigitsData: currencyDigitsData\n    });\n    mnfdDefault = cDigits;\n    mxfdDefault = cDigits;\n  } else {\n    mnfdDefault = 0;\n    mxfdDefault = style === 'percent' ? 0 : 3;\n  }\n  var notation = GetOption(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');\n  internalSlots.notation = notation;\n  SetNumberFormatDigitOptions(internalSlots, options, mnfdDefault, mxfdDefault, notation);\n  var roundingIncrement = GetNumberOption(options, 'roundingIncrement', 1, 5000, 1);\n  if (VALID_ROUND_INCREMENT_VALUES.indexOf(roundingIncrement) === -1) {\n    throw new RangeError(\"Invalid rounding increment value: \".concat(roundingIncrement, \".\\nValid values are \").concat(VALID_ROUND_INCREMENT_VALUES, \".\"));\n  }\n  if (roundingIncrement !== 1 && internalSlots.roundingType !== 'fractionDigits') {\n    throw new TypeError(\"For roundingIncrement > 1 only fractionDigits is a valid roundingType\");\n  }\n  if (roundingIncrement !== 1 && internalSlots.maximumFractionDigits !== internalSlots.minimumFractionDigits) {\n    throw new RangeError('With roundingIncrement > 1, maximumFractionDigits and minimumFractionDigits must be equal.');\n  }\n  internalSlots.roundingIncrement = roundingIncrement;\n  var trailingZeroDisplay = GetOption(options, 'trailingZeroDisplay', 'string', ['auto', 'stripIfInteger'], 'auto');\n  internalSlots.trailingZeroDisplay = trailingZeroDisplay;\n  var compactDisplay = GetOption(options, 'compactDisplay', 'string', ['short', 'long'], 'short');\n  var defaultUseGrouping = 'auto';\n  if (notation === 'compact') {\n    internalSlots.compactDisplay = compactDisplay;\n    defaultUseGrouping = 'min2';\n  }\n  internalSlots.useGrouping = GetStringOrBooleanOption(options, 'useGrouping', ['min2', 'auto', 'always'], 'always', false, defaultUseGrouping);\n  internalSlots.signDisplay = GetOption(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero', 'negative'], 'auto');\n  internalSlots.roundingMode = GetOption(options, 'roundingMode', 'string', ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'], 'halfExpand');\n  return nf;\n}","map":null,"metadata":{},"sourceType":"module"}